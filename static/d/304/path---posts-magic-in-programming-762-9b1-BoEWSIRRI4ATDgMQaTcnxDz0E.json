{"data":{"markdownRemark":{"html":"<p>When I first began my foray into programming, I read a lot about expectations. Many have recorded their experiences learning the trade later in their careers. A simple websearch will return a near endless number of links to articles &#x26; posts dealing with this topic, focusing on everything from <strong>\"What to expect from a coding bootcamp\"</strong> to <strong>\"Why you must learn X technology to land that first job\"</strong>. I'm not too shy to admit I read a lot of this content; as a matter of fact, I ate it up. If there's one thing everyone gets right, it's that it's a big commitment to make this move, so naturally these types of content pieces get plenty of eyes on them. </p>\n<p>I'll concede that some of what I read was quite useful, but as I grew as a developer it didn't take long to realize how surface level most of it was. One line, however, that I read very early on has stuck with me. It's an idea that I've come to understand differently as I've grown, shaping the way I've approached programming along the way. </p>\n<blockquote>\n<p>Knowing is not the same as understanding.</p>\n</blockquote>\n<p>It may seem obvious at face value. When you're learning introductory concepts to web development, </p>","frontmatter":{"date":"March, 31 2019","title":"Magic in programming","author":"Webs"}}},"pageContext":{}}